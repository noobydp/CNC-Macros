### This file contains macros that only work with the klipper for cnc firmware fork: https://github.com/naikymen/klipper-for-cnc

# The following probes are required for these macros and should be defined in your printer.cfg file (or whever you want but not here)
# See: https://www.klipper3d.org/Config_Reference.html#probe

# [probe_G38_multi tool_setter] -> Measures the tool length
# [probe_G38_multi workpiece_probe] -> Measures the workpiece X, Y, or Z positions
# [probe_G38_multi multi_axis_probe] -> CNC Probe like this https://www.aliexpress.com/item/1005003466415556.html

# You also need to define user variables in your printer.cfg (or anywhere, just not here, and it should be defined after this cfg file)
# You can copy the user variables macro below and update the relevant values.

[gcode_macro USER_VARIABLES]
variable_tool_setter_xy: -1, -1 # the X,Y coordinates the tool setter probe is located at - this should be fixed to the bed, otherwise dont use this macro
variable_tool_setter_z_offset: -1 # the Z height that the probe triggers above 0. You need to measure the trigger height of the sensor. The height is the distance from Z=0. You can work this out by using the collet to trigger the probe without a tool (or a tool that is flush with the collet/shoulder)
gcode:

[gcode_macro KCNC_VARIABLES]
variable_current_tool_length: 0
# variable_new_tool_length: 0
gcode:

[delayed_gcode startup] # This macro runs automatically when the machine is turned on or firmware restart. Required to pre-load data.
initial_duration: 1
gcode:
        Respond msg="Validating KCKC Configuration"
        {% set ts_x, ts_y = (printer["gcode_macro USER_VARIABLES"].tool_setter_xy) | map('float') %}
        {% set ts_z_offset = (printer["gcode_macro USER_VARIABLES"].tool_setter_z_offset) |float %}

        {% if ts_x < 0 or ts_y < 0%}
            RESPOND PREFIX="Error" MSG="Tool Setter X, Y coordinates not set in USER_VARIABLES"
        {% endif %}

        {% if ts_z_offset < 0 %}
            RESPOND PREFIX="Error" MSG="Tool Setter Z offset is not set in USER_VARIABLES"
        {% endif %}


[gcode_macro MEASURE_TOOL_LENGTH]
gcode:
    # Requires [probe_G38_multi tool_setter]
    {% set feed_rate = printer.configfile.config["printer"].max_velocity|default(100)|float * 60 %}
    {% set max_z = printer.configfile.config["stepper_z"].position_max|float %}

    {% set ts_x, ts_y = (printer["gcode_macro USER_VARIABLES"].tool_setter_xy) | map('float') %}
    {% if ts_x >= 0 and ts_y >= 0%}
        # {% set tool_setter_xy = printer["gcode_macro USER_VARIABLES"].tool_setter_XY  %}

        # Need to move to the XY probe position first to avoid diagonal moves while probing
        G1 Z{max_z} #Move to max height to avoid collisions
        G1 X{ts_x} Y{ts_y} F{feed_rate} # move to the tool setter XY coords
        MULTIPROBE2 PROBE_NAME=tool_setter Z=0 F=5 # Probe to Z=0 at F=5mm/s
        G91 # Relative move
        G1 Z1 # move up 1mm
        G90 # Absolute move
        MULTIPROBE2 PROBE_NAME=tool_setter Z=0 F=1 # Probe again to Z=0 at F=1mm/s

        QUERY_ENDSTOPS
        UPDATE_DELAYED_GCODE ID=MEASURE_TOOL_LENGTH_DELAYED DURATION=0.05 MACRO=MEASURE_TOOL_LENGTH_DELAYED
    {% else %}
        RESPOND PREFIX="Error" MSG="Tool Setter X, Y coordinates not set in USER_VARIABLES"
    {% endif %}

[delayed_gcode MEASURE_TOOL_LENGTH_DELAYED]
# It seems you cant query_endstops and immediately access the variables, so moving to the delayed gcode should solve the problem if we  query before the delayed code executes.
gcode:
    {% set tool_setter_triggered = printer.query_endstops.last_query["probe_tool_setter"] %}
    # RESPOND MSG="{pt}"

    {% if tool_setter_triggered == 1 %}
        # calcualte tool length, update varioabels
        {% set tool_setter_z_offset = printer["gcode_macro USER_VARIABLES"].tool_setter_z_offset|float %}
        {% set current_z_position = printer.toolhead.position.z|float %}

        {% set current_workspace_offset_z = printer.gcode_move.homing_origin.z %}
        {% set current_tool_length = printer["gcode_macro KCNC_VARIABLES"].current_tool_length|float %}

        {% set new_tool_length = current_z_position - tool_setter_z_offset %}

        {% if current_tool_length > 0 %}
            # calc the difference and stuff
            # old tool has been measured and stored as current_tool_length, so we assume the SET_GCODE_OFFSET values were set with relative to the old tool length.
            {% set tool_length_difference = new_tool_length - current_tool_length %}
            {% set new_workspace_offset_z = current_workspace_offset_z + tool_length_difference %}

            UPDATE_OFFSETS_XYZ Z={new_workspace_offset_z}
            SET_GCODE_VARIABLE MACRO=KCNC_VARIABLES VARIABLE=current_tool_length VALUE={new_tool_length}
            RESPOND PREFIX="info" MSG="New Tool length: {new_tool_length}, Tool length difference: {tool_length_difference}, New Workspace Z Offset: {new_workspace_offset_z}"

        {% else %} % # tool length was not set
            # the tool length is the tool position, minus the tool setter offset
            # {% set tool_length = current_z_position - tool_setter_z_offset %}
            SET_GCODE_VARIABLE MACRO=KCNC_VARIABLES VARIABLE=current_tool_length VALUE={new_tool_length}
            RESPOND PREFIX="info" MSG="Tool length calculated as {current_z_position} - {tool_setter_z_offset} = {new_tool_length}"
        {% endif %}
    {% else %}
        RESPOND PREFIX="Error" MSG="Error calculating tool length"
    {% endif %}

[gcode_macro Temp]
gcode:
    QUERY_ENDSTOPS
        UPDATE_DELAYED_GCODE ID=MEASURE_TOOL_LENGTH_DELAYED DURATION=0.05 MACRO=MEASURE_TOOL_LENGTH_DELAYED


### This file contains macros that only work with the klipper for cnc firmware fork: https://github.com/naikymen/klipper-for-cnc

# The following probes are required for these macros and should be defined in your printer.cfg file (or whever you want but not here)
# See: https://www.klipper3d.org/Config_Reference.html#probe

# [probe_G38_multi tool_setter] -> Measures the tool length
# [probe_G38_multi workpiece_probe] -> Measures the workpiece X, Y, or Z positions
# [probe_G38_multi multi_axis_probe] -> CNC Probe like this https://www.aliexpress.com/item/1005003466415556.html

# You also need to define user variables in your printer.cfg (or anywhere, just not here, and it should be defined after this cfg file is loaded)
# You can copy the user variables macro below and update the relevant values.

[gcode_macro USER_VARIABLES]
# It is not recommended to edit these variables, re-define them in printer.cfg along with your probes
variable_tool_setter_xy: -1, -1 # the X,Y coordinates the tool setter probe is located at - this should be fixed to the bed, otherwise dont use this macro
variable_tool_setter_z_offset: -1 # The Z height that the probe triggers at the lowest part of your collet (i.e. with no tool). 
                                  # You can work this out by using the collet to trigger the probe without a tool (or a tool that is flush with the collet/shoulder)
variable_workpiece_probe_diameter: -1                                  
gcode:

[gcode_macro KCNC_VARIABLES]
variable_current_tool_length: 0
gcode:

[delayed_gcode startup] # This macro runs automatically when the machine is turned on or firmware restart. Required to pre-load data.
initial_duration: 1
gcode:
    Respond msg='Validating KCNC Configuration'
    {% set ts_x, ts_y = (printer['gcode_macro USER_VARIABLES'].tool_setter_xy) | map('float') %}
    {% set ts_z_offset = (printer['gcode_macro USER_VARIABLES'].tool_setter_z_offset) |float %}
    {% set workpiece_probe_diameter = (printer['gcode_macro USER_VARIABLES'].variable_workpiece_probe_diameter)|float %}

    {% if ts_x < 0 or ts_y < 0 %}
        RESPOND PREFIX='Error' MSG='Tool Setter X, Y coordinates not set in USER_VARIABLES'
    {% endif %}

    {% if ts_z_offset < 0 %}
        RESPOND PREFIX='Error' MSG='Tool Setter Z offset is not set in USER_VARIABLES'
    {% endif %}

    {% if workpiece_probe_diameter < 0 %}
        RESPOND PREFIX='Error' MSG='Workpiece Probe diameter is not set in USER_VARIABLES'
    {% endif %}


[gcode_macro TEST_PROBE_POSITION]
gcode:
    MULTIPROBE2 PROBE_NAME='workpiece_probe' X=-20 F=5
    QUERY_ENDSTOPS
    RESPOND MSG='last query: {printer.query_endstops.last_query}'
    RESPOND MSG='gcode_move: {printer.gcode_move}'
    RESPOND MSG='toolhead: {printer.toolhead}'

[gcode_macro QUERY_TOOL_LENGTH]
gcode:
    {% set current_tool_length = printer['gcode_macro KCNC_VARIABLES'].current_tool_length|float %}
    RESPOND PREFIX='info' MSG='Current Tool Length: {current_tool_length}'

[gcode_macro MEASURE_TOOL_LENGTH]
gcode:
    # Requires [probe_G38_multi tool_setter]

    SAVE_GCODE_STATE NAME=MTL_STATE # Saves offets

    # zero offsets to test save state and zeroing actual offsets in the macro
    {% set current_x_offset = 0|float %}
    {% set current_y_offset = 0|float %}
    {% set current_z_offset = 0|float %}

    {% set feed_rate = printer.configfile.config['printer'].max_velocity|default(100)|float * 60 %}
    {% set max_z_with_offset = printer.configfile.config['stepper_z'].position_max|float - current_z_offset %}

    # Set X Y offsets to 0
    # ZERO_OFFSETS_XYZ # calling this macro doesnt work
    SET_GCODE_OFFSET X=0 Y=0 Z=0

    {% set ts_x, ts_y = (printer['gcode_macro USER_VARIABLES'].tool_setter_xy) | map('float') %}
    {% if ts_x >= 0 and ts_y >= 0 %}
        # {% set tool_setter_xy = printer['gcode_macro USER_VARIABLES'].tool_setter_XY  %}

        G1 Z{max_z_with_offset} # Move to max height to avoid collisions
        G1 X{ts_x - current_x_offset} Y{ts_y - current_y_offset} F{feed_rate} # move to the tool setter XY coords, adjusted to ignore offsets

        MULTIPROBE2 PROBE_NAME=tool_setter Z=0 F=5 # Probe to Z=0 at F=5mm/s
        G91 # Relative move
        G1 Z2 # move up 2mm
        G90 # Absolute move
        MULTIPROBE2 PROBE_NAME=tool_setter Z=0 F=1 # Probe again to Z=0 at F=1mm/s

        RESTORE_GCODE_STATE NAME=MTL_STATE # reload offsets before doing math

        QUERY_ENDSTOPS
        # It seems you cant query_endstops and immediately access the variables, so moving to the delayed gcode should solve the problem if we  query before the delayed code executes.
        UPDATE_DELAYED_GCODE ID=_MEASURE_TOOL_LENGTH_DELAYED DURATION=0.1 MACRO=_MEASURE_TOOL_LENGTH_DELAYED
    {% else %}
        RESPOND PREFIX='Error' MSG='Tool Setter X, Y coordinates not set in USER_VARIABLES'
    {% endif %}

[delayed_gcode _MEASURE_TOOL_LENGTH_DELAYED]
# It seems you cant query_endstops and immediately access the variables, so moving to the delayed gcode should solve the problem if we  query before the delayed code executes.
gcode:
    {% set current_z_offset = printer.gcode_move.homing_origin.z|float %}
    {% set max_z_with_offset = printer.configfile.config['stepper_z'].position_max|float - current_z_offset %}

    {% set tool_setter_triggered = printer.query_endstops.last_query['probe_tool_setter'] %}
    # RESPOND MSG='{pt}'

    {% if tool_setter_triggered == 1 %}
        # calcualte tool length, update varioabels
        {% set tool_setter_z_offset = printer['gcode_macro USER_VARIABLES'].tool_setter_z_offset|float %}
        {% set current_z_position = printer.toolhead.position.z|float %}

        {% set current_workspace_offset_z = printer.gcode_move.homing_origin.z %}
        {% set current_tool_length = printer['gcode_macro KCNC_VARIABLES'].current_tool_length|float %}

        {% set new_tool_length = current_z_position - tool_setter_z_offset %}

        {% if current_tool_length > 0 %}
            # calc the difference and stuff
            # old tool has been measured and stored as current_tool_length, so we assume the SET_GCODE_OFFSET values were set with relative to the old tool length.
            {% set tool_length_difference = new_tool_length - current_tool_length %}
            {% set new_workspace_offset_z = current_workspace_offset_z + tool_length_difference %}

            UPDATE_OFFSETS_XYZ Z={new_workspace_offset_z}
            SET_GCODE_VARIABLE MACRO=KCNC_VARIABLES VARIABLE=current_tool_length VALUE={new_tool_length}
            RESPOND PREFIX='info' MSG='New Tool length: {new_tool_length}, Tool length difference: {tool_length_difference}, New Workspace Z Offset: {new_workspace_offset_z}'

        {% else %} % # tool length was not set
            # the tool length is the tool position, minus the tool setter offset
            # {% set tool_length = current_z_position - tool_setter_z_offset %}
            SET_GCODE_VARIABLE MACRO=KCNC_VARIABLES VARIABLE=current_tool_length VALUE={new_tool_length}
            RESPOND PREFIX='info' MSG='Tool length calculated as {current_z_position} - {tool_setter_z_offset} = {new_tool_length}'
        {% endif %}
        G4 P1000
        G1 Z{max_z_with_offset - 1} # Home Z to be safe
    {% else %}
        RESPOND PREFIX='Error' MSG='Error calculating tool length'
    {% endif %}

[gcode_macro PROBE_AXIS]
variable_probe_name: ""
variable_axis: ""
variable_direction: ""
variable_probe_diameter: 0
gcode:
    # SAVE_GCODE_STATE NAME=PA_STATE # Saves offets
    # SET_GCODE_OFFSET X=0 Y=0 Z=0 # zero offsets

    {% set probeName = params.PROBENAME|default('workpiece_probe')|lower %}
    {% set axis = params.AXIS|lower %}
    {% set distance = params.DISTANCE|default(20)|float %}
    {% set feedrate = params.FEEDRATE|default(5)|float %}

    {% set probeDiameter = params.PROBE_DIAMETER|default(printer['gcode_macro USER_VARIABLES'].workpiece_probe_diameter)|float %}


    {% if axis in printer.toolhead.homed_axes %} # test if the axis is homed before doing anything
        {% if axis == 'z' %}
            {% set direction = -1 %} # invert direction for Z probing
        {% else %}
            {% set direction = 1 %}
        {% endif %}
        
        G91 # Set relative movement mode
        MULTIPROBE2 PROBE_NAME={probeName} {axis}={distance*direction} F={feedrate} # 'fast' probe

        QUERY_ENDSTOPS
        # It seems you cant query_endstops and immediately access the variables, so moving to the delayed gcode should solve the problem if we  query before the delayed code executes.
        SET_GCODE_VARIABLE MACRO=PROBE_AXIS VARIABLE=probe_name VALUE="'{probeName}'"
        SET_GCODE_VARIABLE MACRO=PROBE_AXIS VARIABLE=axis VALUE="'{axis}'"
        SET_GCODE_VARIABLE MACRO=PROBE_AXIS VARIABLE=direction VALUE={direction}
        SET_GCODE_VARIABLE MACRO=PROBE_AXIS VARIABLE=probe_diameter VALUE={probeDiameter}
        UPDATE_DELAYED_GCODE ID=_PROBE_AXIS_DELAYED DURATION=0.1 MACRO=_PROBE_AXIS_DELAYED
    {% else %}
        RESPOND prefix="error" msg="Unable to probe, axis: {axis} is not homed"
    {% endif %}

    G90 #Absolute mode

[delayed_gcode _PROBE_AXIS_DELAYED]
# It seems you cant query_endstops and immediately access the variables, so moving to the delayed gcode should solve the problem if we  query before the delayed code executes.
gcode:
    {% set parameters = printer['gcode_macro PROBE_AXIS'] %}

    {% set probeName = parameters.probe_name|lower %}
    {% set axis = parameters.axis|lower %}
    {% set probeDiameter = parameters.probe_diameter|float %}
    {% set probe = 'probe_' + probeName %}

    {% set probe_triggered = printer.query_endstops.last_query[probe] %}

    {% if probe_triggered == 1 %}
        # calcualte tool length, update varioabels

        {% if axis == 'z' %}
            {% set position = (printer.toolhead.position[{'x': 0, 'y': 1, 'z': 2}[axis|lower]])|float %}
        {% else %}
            {% set position = (printer.toolhead.position[{'x': 0, 'y': 1, 'z': 2}[axis|lower]] + probeDiameter/2)|float %}
        {% endif %}

        UPDATE_OFFSETS_XYZ {axis}={position}
        # SET_GCODE_VARIABLE MACRO=KCNC_VARIABLES VARIABLE=current_tool_length VALUE={new_tool_length}
        RESPOND PREFIX='info' MSG='Workpiece offset updated: {axis|upper}:{position}'

    {% else %} % # probing failed
            RESPOND PREFIX='error' MSG='Probing Failed'
    {% endif %}

    G90 #Absolute mode

[gcode_macro _HOLE_CENTER_VARS]
variable_probe_name: ""
variable_probe_distance: 0
variable_feedrate: 0

variable_hole_x_min: -1
variable_hole_y_min: -1
variable_hole_center_x: -1
variable_hole_center_y: -1
variable_current_movement: ""
variable_update_offset: "" # Update the current offset when macro is complete?
gcode:

[gcode_macro FIND_HOLE_CENTER]
gcode:
    {% set probeName = params.PROBENAME|default('workpiece_probe')|string %}
    {% set probeDistance = params.PROBEDISTANCE|default(20)|float %}
    {% set feedrate = params.FEEDRATE|default(5)|float %}
    {% set updateOffset = params.UPDATEOFFSET|default('Y')|string %} # move up this amolunt to avoid the workpiece and clamps

    #set some vars for delayed macros
    SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=probe_name VALUE="'{probeName}'"
    SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=probe_distance VALUE={probeDistance}
    SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=feedrate VALUE={feedrate}
    SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=update_offset VALUE="'{updateOffset}'"

    # Reset all saved vars for validating later
    SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=hole_x_min VALUE=-1

    SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=hole_y_min VALUE=-1
    SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=hole_center_x VALUE=-1
    SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=hole_center_y VALUE=-1

    SET_GCODE_OFFSET X=0 Y=0 Z=0
    
    G91 # relative mode

    SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=current_movement VALUE="'hole_x_min'" # set next move in sequence
    UPDATE_DELAYED_GCODE ID=_FIND_HOLE_CENTER_PROBING_DELAYED DURATION=0.1 MACRO=_FIND_HOLE_CENTER_PROBING_DELAYED # trigger next probing sequence

    # G90 # Absolute mode

[delayed_gcode _FIND_HOLE_CENTER_PROBING_DELAYED]
gcode:
    {% set parameters = printer['gcode_macro _HOLE_CENTER_VARS'] %}
    {% set probeName = parameters.probe_name|string %}
    {% set probeDistance = parameters.probe_distance|float %}
    {% set feedrate = parameters.feedrate|float %}

    ########### X MIN PROBING
    {% if parameters.current_movement == 'hole_x_min' %}
        G91 # ensure relative mode  
        MULTIPROBE2 PROBE_NAME={probeName} X=-{probeDistance} F={feedrate}
        UPDATE_DELAYED_GCODE ID=_FIND_HOLE_CENTER_CALCULATIONS_DELAYED DURATION=0.1 MACRO=_FIND_HOLE_CENTER_CALCULATIONS_DELAYED

    ########### X MAX PROBING
    {% elif parameters.current_movement == 'hole_x_max'%}
        G91 # ensure relative mode
        MULTIPROBE2 PROBE_NAME={probeName} X={probeDistance*2} F={feedrate}
        UPDATE_DELAYED_GCODE ID=_FIND_HOLE_CENTER_CALCULATIONS_DELAYED DURATION=0.1 MACRO=_FIND_HOLE_CENTER_CALCULATIONS_DELAYED

    ########### Y MIN PROBING
    {% elif parameters.current_movement == 'hole_y_min'%}
        G91 # ensure relative mode
        MULTIPROBE2 PROBE_NAME={probeName} Y=-{probeDistance} F={feedrate}
        UPDATE_DELAYED_GCODE ID=_FIND_HOLE_CENTER_CALCULATIONS_DELAYED DURATION=0.1 MACRO=_FIND_HOLE_CENTER_CALCULATIONS_DELAYED

    ########### Y MAX PROBING
    {% elif parameters.current_movement == 'hole_y_max'%}
        G91 # ensure relative mode
        MULTIPROBE2 PROBE_NAME={probeName} Y={probeDistance*2} F={feedrate}
        UPDATE_DELAYED_GCODE ID=_FIND_HOLE_CENTER_CALCULATIONS_DELAYED DURATION=0.1 MACRO=_FIND_HOLE_CENTER_CALCULATIONS_DELAYED
    
    {% else %}
        RESPOND PREFIX="error" MSG="Error in probing delayed macro"
        SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=current_movement VALUE="''"
        G90 # Absolute mode
    {% endif %}

[delayed_gcode _FIND_HOLE_CENTER_CALCULATIONS_DELAYED]
gcode:
    # RESPOND MSG='Inside CALCS'
    {% set parameters = printer['gcode_macro _HOLE_CENTER_VARS'] %}
    # RESPOND MSG='parameters {parameters}'
    
    ########### X MIN CALCS
    {% if parameters.current_movement == 'hole_x_min' %}
        SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=hole_x_min VALUE={printer.toolhead.position.x|float}
        # RESPOND MSG='parameters hole x min: {printer.toolhead.position.x|float}'

        G91 # ensure relative move
        G1 X1 # move away to stop trigger
        SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=current_movement VALUE="'hole_x_max'" # set next move in sequence
        UPDATE_DELAYED_GCODE ID=_FIND_HOLE_CENTER_PROBING_DELAYED DURATION=0.1 MACRO=_FIND_HOLE_CENTER_PROBING_DELAYED # trigger next probing sequence
    
    ########### X MAX CALCS
    {% elif parameters.current_movement == 'hole_x_max'%}
        {% set holeXMin = parameters.hole_x_min %}
        {% set holeXMax = printer.toolhead.position.x|float %}
        
        # RESPOND MSG='hole x min,max: {holeXMin},{holeXMax}'
        {% if (holeXMin >= 0) and (holeXMax >=0 ) %}
            # Calculate X center
            {% set holeCenterX = (holeXMin + holeXMax) / 2 %}
            {% set holeXRad = (holeXMax - holeXMin) / 2  %}
            RESPOND MSG='Hole X, min:{holeXMin}, max:{holeXMax}, center:{holeCenterX}'
            SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=hole_center_x VALUE={holeCenterX|float}

            G91 # ensure relative mode
            G1 X-{holeXRad} # move to X center

            SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=current_movement VALUE="'hole_y_min'" # set next move in sequence
            UPDATE_DELAYED_GCODE ID=_FIND_HOLE_CENTER_PROBING_DELAYED DURATION=0.1 MACRO=_FIND_HOLE_CENTER_PROBING_DELAYED # trigger next probing sequence
        {% else %}
            RESPOND prefix='error' MSG='Error calculating X center'
            SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=current_movement VALUE="''"
            G90 # Absolute mode
        {% endif %}

    ########### Y MIN CALCS
    {% elif parameters.current_movement == 'hole_y_min'%}
        SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=hole_y_min VALUE={printer.toolhead.position.y|float}
        # RESPOND MSG='parameters hole y min: {printer.toolhead.position.y|float}'

        G91 # ensure relative move
        G1 Y1 # move away to stop trigger
        SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=current_movement VALUE="'hole_y_max'" # set next move in sequence
        UPDATE_DELAYED_GCODE ID=_FIND_HOLE_CENTER_PROBING_DELAYED DURATION=0.1 MACRO=_FIND_HOLE_CENTER_PROBING_DELAYED # trigger next probing sequence

    ########### Y MAX CALCS
    {% elif parameters.current_movement == 'hole_y_max'%}
        # SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=hole_y_max VALUE={printer.toolhead.position.y|float}

        {% set holeCenterX = parameters.hole_center_x %}
        # SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=current_movement VALUE="''"

        {% set holeYMin = parameters.hole_y_min %}
        {% set HoleYMax = printer.toolhead.position.y|float %}

        # RESPOND MSG='hole y min,max: {holeYMin},{HoleYMax}'
        {% if (holeYMin >= 0) and (HoleYMax >=0 ) %}
            # Calculate Y center
            {% set holeCenterY = (holeYMin + HoleYMax) / 2 %}
            {% set holeYRad = (HoleYMax - holeYMin) /2  %}

            G91 # ensure relative mode
            G1 Y-{holeYRad} # move to Y center
            
            RESPOND MSG='Hole Y, min:{holeYMin}, max:{holeYMax}, center:{holeCenterY}'
            SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=hole_center_y VALUE={holeCenterY|float}

            {% if parameters.update_offset|lower == 'y' %}
                RESPOND PREFIX='Info' MSG='SETTING OFFSETS to hole center at: {holeCenterX}, {holeCenterY}'
                SET_GCODE_OFFSET X={holeCenterX} Y={holeCenterY}
            {% endif %}
            
            RESPOND PREFIX='Info' MSG='Ensure you reset Z Offset if required'

        {% else %}
            RESPOND prefix='error' msg='Error calculating Y center'
            SET_GCODE_VARIABLE MACRO=_HOLE_CENTER_VARS VARIABLE=current_movement VALUE="''"
            G90 # Absolute mode
        {% endif %}
    {% endif %}


[gcode_macro _PART_CENTER_VARS]
variable_probe_name: ""
variable_probe_axis: ""
variable_probe_distance: 0
variable_feedrate: 0
variable_part_distance: 0
variable_z_hop: 0
variable_update_offset: "" # Update the current offset when macro is complete?

variable_part_min: -1
variable_part_center: -1
variable_current_movement: ""
gcode:

[gcode_macro FIND_PART_CENTER]
gcode:
    {% set probeName = params.PROBENAME|default('workpiece_probe')|string %}
    {% set probeAxis = params.PROBEAXIS|default('x')|string %}
    {% set probeDistance = params.PROBEDISTANCE|default(20)|float %} # Move towards the workpiece by this amount on either side of the part (partDistance)
    {% set feedrate = params.FEEDRATE|default(5)|float %}
    {% set partDistance = params.PARTDISTANCE|default(100)|float %}
    {% set zHop = params.ZHOP|default(50)|float %} # move up this amolunt to avoid the workpiece and clamps
    {% set updateOffset = params.UPDATEOFFSET|default('Y')|string %} # move up this amolunt to avoid the workpiece and clamps

    {% if probeDistance > 0 %}
        #set some vars for delayed macros
        SET_GCODE_VARIABLE MACRO=_PART_CENTER_VARS VARIABLE=probe_name VALUE="'{probeName}'"
        SET_GCODE_VARIABLE MACRO=_PART_CENTER_VARS VARIABLE=probe_axis VALUE="'{probeAxis}'"
        SET_GCODE_VARIABLE MACRO=_PART_CENTER_VARS VARIABLE=probe_distance VALUE={probeDistance}
        SET_GCODE_VARIABLE MACRO=_PART_CENTER_VARS VARIABLE=feedrate VALUE={feedrate}
        SET_GCODE_VARIABLE MACRO=_PART_CENTER_VARS VARIABLE=part_distance VALUE={partDistance}
        SET_GCODE_VARIABLE MACRO=_PART_CENTER_VARS VARIABLE=z_hop VALUE={zHop}
        SET_GCODE_VARIABLE MACRO=_PART_CENTER_VARS VARIABLE=update_offset VALUE="'{updateOffset}'"

        # Reset all saved vars for validating later
        SET_GCODE_VARIABLE MACRO=_PART_CENTER_VARS VARIABLE=part_min VALUE=-1
        SET_GCODE_VARIABLE MACRO=_PART_CENTER_VARS VARIABLE=part_center VALUE=-1

        SET_GCODE_OFFSET X=0 Y=0 Z=0
        
        G91 # relative mode

        SET_GCODE_VARIABLE MACRO=_PART_CENTER_VARS VARIABLE=current_movement VALUE="'part_min'" # set next move in sequence
        UPDATE_DELAYED_GCODE ID=_FIND_PART_CENTER_PROBING_DELAYED DURATION=0.1 MACRO=_FIND_PART_CENTER_PROBING_DELAYED # trigger next probing sequence

        # G90 # Absolute mode

    {% else %}
        RESPOND PREFIX="error" MSG="Error probe distance must be > 0"
    {% endif %}
    
[gcode_macro _FIND_PART_CENTER_PROBING_DELAYED]
gcode:
    {% set parameters = printer['gcode_macro _PART_CENTER_VARS'] %}
    {% set probeName = parameters.probe_name|string %}
    {% set probeDistance = parameters.probe_distance|float %}
    {% set feedrate = parameters.feedrate|float %}

    ########### MIN PROBING
    {% if parameters.current_movement == 'part_min' %}
        G91 # ensure relative mode  
        MULTIPROBE2 PROBE_NAME={probeName} {parameters.probe_axis|lower}={probeDistance} F={feedrate}
        UPDATE_DELAYED_GCODE ID=_FIND_PART_CENTER_CALCULATIONS_DELAYED DURATION=0.1 MACRO=_FIND_PART_CENTER_CALCULATIONS_DELAYED

    ########### MAX PROBING
    {% elif parameters.current_movement == 'part_max'%}
        G91 # ensure relative mode
        MULTIPROBE2 PROBE_NAME={probeName} {parameters.probe_axis|lower}=-{probeDistance*2} F={feedrate} # probe distance x2 for clearance after max move
        UPDATE_DELAYED_GCODE ID=_FIND_PART_CENTER_CALCULATIONS_DELAYED DURATION=0.1 MACRO=_FIND_PART_CENTER_CALCULATIONS_DELAYED
    
    {% else %}
        RESPOND PREFIX="error" MSG="Error in probing delayed macro"
        SET_GCODE_VARIABLE MACRO=_PART_CENTER_VARS VARIABLE=current_movement VALUE="''"
        G90 # Absolute mode
    {% endif %}
    

[delayed_gcode _FIND_PART_CENTER_CALCULATIONS_DELAYED]
gcode:
    {% set parameters = printer['gcode_macro _PART_CENTER_VARS'] %}
    
    ########### MIN CALCS
    {% if parameters.current_movement == 'part_min' %}
        SET_GCODE_VARIABLE MACRO=_PART_CENTER_VARS VARIABLE=part_min VALUE={printer.toolhead.position[parameters.probe_axis]}

        G91 # ensure relative move
        G1 {parameters.probe_axis|lower}-1 # move away to stop trigger
        G1 Z{parameters.z_hop|float} # move up to clear the part and clamps
        G1 {parameters.probe_axis|lower}{parameters.part_distance + parameters.probe_distance} # move over the part by part_distance plus probe distance for clearance
        G1 Z-{parameters.z_hop|float} # move back down

        SET_GCODE_VARIABLE MACRO=_PART_CENTER_VARS VARIABLE=current_movement VALUE="'part_max'" # set next move in sequence
        UPDATE_DELAYED_GCODE ID=_FIND_PART_CENTER_PROBING_DELAYED DURATION=0.1 MACRO=_FIND_PART_CENTER_PROBING_DELAYED # trigger next probing sequence

    # ########### MAX CALCS
    {% elif parameters.current_movement == 'part_max'%}
        {% set partMin = parameters.part_min %}
        {% set partMax = printer.toolhead.position[parameters.probe_axis] %}
        
        # RESPOND MSG='hole x min,max: {partMin},{partMax}'
        {% if (partMin >= 0) and (partMax >=0 ) %}
            # Calculate X center
            {% set partCenter = (partMin + partMax) / 2 %}
            # {% set holeXRad = (partMax - partMin) / 2  %}
            RESPOND MSG='Part min:{partMin}, max:{partMax}, center:{partCenter}'
            SET_GCODE_VARIABLE MACRO=_PART_CENTER_VARS VARIABLE=part_center VALUE={partCenter|float}

            {% if parameters.update_offset|lower == 'y' %}
                RESPOND MSG='{parameters.probe_axis|upper} Axis Offset updated to:{partCenter}'
                UPDATE_OFFSETS_XYZ {parameters.probe_axis}={partCenter}
            {% endif %}

            G91 # ensure relative move
            G1 {parameters.probe_axis|lower}1 # move away to stop trigger
            G1 Z{parameters.z_hop|float} # move up to clear the part and clamps

        {% else %}
            RESPOND prefix='error' MSG='Error calculating center'
            SET_GCODE_VARIABLE MACRO=_PART_CENTER_VARS VARIABLE=current_movement VALUE="''"
            G90 # Absolute mode
        {% endif %}
    {% endif %}

[gcode_macro _TWO_POINTS_VARS]
variable_probe_name: ""
variable_probe_axis: ""
variable_probe_distance: 0
variable_feedrate: 0
variable_point_distance: 0
variable_z_hop: 0
variable_update_offset: "" # Update the current offset when macro is complete?

variable_first_point: -1
# variable_part_center: -1
variable_current_movement: ""
gcode:

[gcode_macro PROBE_TWO_POINTS]
gcode:
    {% set probeName = params.PROBENAME|default('workpiece_probe')|string %}
    {% set probeAxis = params.PROBEAXIS|string %}
    {% set probeDistance = params.PROBEDISTANCE|default(20)|float %} # Move towards the workpiece by this amount on either side of the part (pointDistance)
    {% set feedrate = params.FEEDRATE|default(5)|float %}
    {% set pointDistance = params.POINTDISTANCE|default(100)|float %}
    {% set zHop = params.ZHOP|default(0)|float %} # move up this amolunt to avoid the workpiece and clamps
    # {% set updateOffset = params.UPDATEOFFSET|default('Y')|string %} # move up this amolunt to avoid the workpiece and clamps

    {% if pointDistance > 0 %}
        #set some vars for delayed macros
        SET_GCODE_VARIABLE MACRO=_TWO_POINTS_VARS VARIABLE=probe_name VALUE="'{probeName}'"
        SET_GCODE_VARIABLE MACRO=_TWO_POINTS_VARS VARIABLE=probe_axis VALUE="'{probeAxis}'"
        SET_GCODE_VARIABLE MACRO=_TWO_POINTS_VARS VARIABLE=probe_distance VALUE={probeDistance}
        SET_GCODE_VARIABLE MACRO=_TWO_POINTS_VARS VARIABLE=feedrate VALUE={feedrate}
        SET_GCODE_VARIABLE MACRO=_TWO_POINTS_VARS VARIABLE=point_distance VALUE={pointDistance}
        SET_GCODE_VARIABLE MACRO=_TWO_POINTS_VARS VARIABLE=z_hop VALUE={zHop}
        # SET_GCODE_VARIABLE MACRO=_TWO_POINTS_VARS VARIABLE=update_offset VALUE="'{updateOffset}'"

        # Reset all saved vars for validating later
        SET_GCODE_VARIABLE MACRO=_TWO_POINTS_VARS VARIABLE=first_point VALUE=-1

        SET_GCODE_OFFSET X=0 Y=0 Z=0
        
        G91 # relative mode

        SET_GCODE_VARIABLE MACRO=_TWO_POINTS_VARS VARIABLE=current_movement VALUE="'first_point'" # set next move in sequence
        UPDATE_DELAYED_GCODE ID=_PROBE_TWO_POINTS_LOGIC_DELAYED DURATION=0.1 MACRO=_PROBE_TWO_POINTS_LOGIC # trigger next probing sequence

        G90 # Absolute mode

    {% else %}
        RESPOND PREFIX="error" MSG="Error point distance must be > 0"
    {% endif %}
    
[delayed_gcode _PROBE_TWO_POINTS_LOGIC_DELAYED]
gcode:
    {% set parameters = printer['gcode_macro _TWO_POINTS_VARS'] %}
    {% set probeName = parameters.probe_name|string %}
    {% set probeDistance = parameters.probe_distance|float %}
    {% set feedrate = parameters.feedrate|float %}
    # {% set POINTdISTANCE = parameters.point_distance|float %}

    ########### FIRST POINT PROBING
    {% if parameters.current_movement == 'first_point' %}
        G91 # ensure relative mode  
        MULTIPROBE2 PROBE_NAME={probeName} {parameters.probe_axis|lower}={probeDistance} F={feedrate}
        _PROBE_TWO_POINTS_CALCULATIONS

    ########### SECOND POINT PROBING
        {% elif parameters.current_movement == 'second_point'%}
        G91 # ensure relative mode
        MULTIPROBE2 PROBE_NAME={probeName} {parameters.probe_axis|lower}={probeDistance*2} F={feedrate} # probe distance x2 for clearance after max move
        _PROBE_TWO_POINTS_CALCULATIONS
    
    {% else %}
        RESPOND PREFIX="error" MSG="Error in probing macro"
        SET_GCODE_VARIABLE MACRO=_TWO_POINTS_VARS VARIABLE=current_movement VALUE="''"
        G90 # Absolute mode
    {% endif %}
    

[gcode_macro _PROBE_TWO_POINTS_CALCULATIONS]
gcode:
    {% set parameters = printer['gcode_macro _TWO_POINTS_VARS'] %}
    {% set axis_map = {'X': 'Y', 'Y': 'X'} %}
    {% set move_axis = axis_map[parameters.probe_axis|upper] %}
    
    ########### FIRST POINT CALCS
    {% if parameters.current_movement == 'first_point' %}
        SET_GCODE_VARIABLE MACRO=_TWO_POINTS_VARS VARIABLE=first_point VALUE={printer.toolhead.position[parameters.probe_axis]}

        G91 # ensure relative move
        G1 {parameters.probe_axis|lower}-{parameters.probe_distance/2} # move away to stop trigger
        G1 Z{parameters.z_hop|float} # move up to clear the part and clamps
        G1 {move_axis|lower}{parameters.point_distance} # move by point_distance 
        G1 Z-{parameters.z_hop|float} # move back down

        SET_GCODE_VARIABLE MACRO=_TWO_POINTS_VARS VARIABLE=current_movement VALUE="'second_point'" # set next move in sequence
        UPDATE_DELAYED_GCODE ID=_PROBE_TWO_POINTS_LOGIC_DELAYED DURATION=0.1 MACRO=_PROBE_TWO_POINTS_LOGIC # trigger next probing sequence

    # ########### SECOND POINT CALCS
    {% elif parameters.current_movement == 'second_point' %}
        {% set firstPoint = parameters.first_point %}
        {% set secondPoint = printer.toolhead.position[parameters.probe_axis] %}
        
        RESPOND MSG="Points one,two: {firstPoint},{secondPoint}"
        {% if (firstPoint >= 0) and (secondPoint >=0 ) %}
            # Calculate difference
            {% set difference = secondPoint - firstPoint %}
            RESPOND MSG="Difference (second-first): {difference}"

        {% else %}
            RESPOND prefix='error' MSG="Error calculating difference"
            SET_GCODE_VARIABLE MACRO=_TWO_POINTS_VARS VARIABLE=current_movement VALUE="''"
            G90 # Absolute mode
        {% endif %}
    {% endif %}
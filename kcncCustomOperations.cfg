### This file contains macros that only work with the klipper for cnc firmware fork: https://github.com/naikymen/klipper-for-cnc

# The following probes are required for these macros and should be defined in your printer.cfg file (or whever you want but not here)
# See: https://www.klipper3d.org/Config_Reference.html#probe

# [probe_G38_multi tool_setter] -> Measures the tool length
# [probe_G38_multi workpiece_probe] -> Measures the workpiece X, Y, or Z positions
# [probe_G38_multi multi_axis_probe] -> CNC Probe like this https://www.aliexpress.com/item/1005003466415556.html

# You also need to define user variables in your printer.cfg (or anywhere, just not here, and it should be defined after this cfg file is loaded)
# You can copy the user variables macro below and update the relevant values.

[gcode_macro USER_VARIABLES]
# It is not recommended to edit these variables, re-define them in printer.cfg along with your probes
variable_tool_setter_xy: -1, -1 # the X,Y coordinates the tool setter probe is located at - this should be fixed to the bed, otherwise dont use this macro
variable_tool_setter_z_offset: -1 # The Z height that the probe triggers at the lowest part of your collet (i.e. with no tool). 
                                  # You can work this out by using the collet to trigger the probe without a tool (or a tool that is flush with the collet/shoulder)
gcode:

[gcode_macro KCNC_VARIABLES]
variable_current_tool_length: 0
# variable_new_tool_length: 0
gcode:

[delayed_gcode startup] # This macro runs automatically when the machine is turned on or firmware restart. Required to pre-load data.
initial_duration: 1
gcode:
    Respond msg='Validating KCNC Configuration'
    {% set ts_x, ts_y = (printer['gcode_macro USER_VARIABLES'].tool_setter_xy) | map('float') %}
    {% set ts_z_offset = (printer['gcode_macro USER_VARIABLES'].tool_setter_z_offset) |float %}

    {% if ts_x < 0 or ts_y < 0%}
        RESPOND PREFIX='Error' MSG='Tool Setter X, Y coordinates not set in USER_VARIABLES'
    {% endif %}

    {% if ts_z_offset < 0 %}
        RESPOND PREFIX='Error' MSG='Tool Setter Z offset is not set in USER_VARIABLES'
    {% endif %}

[gcode_macro TOOLHEAD_POSITION]
# rename_existing: START_PROBE_AXIS_VANILLA
#This macro overwrites the same macro defined in customOperations.cfg
gcode:
    RESPOND PREFIX='info' MSG='toolhead: {printer.toolhead.position}'

[gcode_macro START_PROBE_AXIS]
#This macro overwrites the same macro defined in customOperations.cfg
gcode:
    # Requires [probe_G38_multi multi_axis_probe]

    {% set current_x_offset = printer.gcode_move.homing_origin.x|float %}
    {% set current_y_offset = printer.gcode_move.homing_origin.y|float %}
    {% set current_z_offset = printer.gcode_move.homing_origin.z|float %}
    {% set current_offsets = {'x': current_x_offset, 'y': current_y_offset, 'z': current_z_offset} %}

    {% set probeName = params.PROBENAME|default('tool_setter')|lower %}

    {% set axis = params.AXIS|lower %}
    {% if axis == 'z' %}
        {% set direction = -1 %} # invert direction for Z probing
    {% else %}
        {% set direction = 1 %}
    {% endif %}
    {% set distance = params.DISTANCE|default(20)|float %}
    {% set feedrate = params.FEEDRATE|default(5)|float %}

    # {% set step = printer['gcode_macro PROBE_AXIS'].step %}
    # {% set probe_diameter = params.PROBE_DIAMETER|default(printer['gcode_macro PROBE_AXIS'].probe_diameter)|float %}

    G91 # Set relative movement mode
    MULTIPROBE2 PROBE_NAME={probeName} {axis}={distance*direction} F={feedrate} # 'fast' probe
    G1 {axis}{direction*-1} # move away 1mm
    MULTIPROBE2 PROBE_NAME={probeName} {axis}={distance*direction} F={feedrate/10} # Probe slowly for accuracy
    
    G4 P500 # dwell

    RESPOND PREFIX='info' MSG='toolhead: {printer.toolhead.position}'
    RESPOND PREFIX='info' MSG='current_offsets: {current_offsets}'

    {% set position = (printer.toolhead.position[{'x': 0, 'y': 1, 'z': 2}[axis|lower]])|float %}

    RESPOND PREFIX='info' MSG='Probing Successful, Updating Offset, {axis|upper}:{position}'    
    UPDATE_OFFSETS_XYZ {axis|upper}={position}

    G1 {axis}{direction*-1} # move away 1mm
    G90 # absolute mode

[gcode_macro TEST_POSITION]
gcode:
    {% set ts_x, ts_y = (printer['gcode_macro USER_VARIABLES'].tool_setter_xy) | map('float') %}

    RESPOND PREFIX='info' MSG='toolhead: {printer.toolhead.position}'
    MULTIPROBE2 PROBE_NAME=tool_setter Z=0 F=10
    RESPOND PREFIX='info' MSG='toolhead: {printer.toolhead.position}'


[gcode_macro QUERY_TOOL_LENGTH]
gcode:
    {% set current_tool_length = printer['gcode_macro KCNC_VARIABLES'].current_tool_length|float %}
    RESPOND PREFIX='info' MSG='Current Tool Length: {current_tool_length}'

[gcode_macro MEASURE_TOOL_LENGTH]
gcode:
    # Requires [probe_G38_multi tool_setter]
    {% set current_x_offset = printer.gcode_move.homing_origin.x|float %}
    {% set current_y_offset = printer.gcode_move.homing_origin.y|float %}
    {% set current_z_offset = printer.gcode_move.homing_origin.z|float %}

    {% set feed_rate = printer.configfile.config['printer'].max_velocity|default(100)|float * 60 %}
    {% set max_z_with_offset = printer.configfile.config['stepper_z'].position_max|float - current_z_offset %}

    # Set X Y offsets to 0

    {% set ts_x, ts_y = (printer['gcode_macro USER_VARIABLES'].tool_setter_xy) | map('float') %}
    {% if ts_x >= 0 and ts_y >= 0 %}
        # {% set tool_setter_xy = printer['gcode_macro USER_VARIABLES'].tool_setter_XY  %}

        G1 Z{max_z_with_offset} #Move to max height to avoid collisions
        G1 X{ts_x - current_x_offset} Y{ts_y - current_y_offset} F{feed_rate} # move to the tool setter XY coords, adjusted to ignore offsets

        MULTIPROBE2 PROBE_NAME=tool_setter Z=0 F=5 # Probe to Z=0 at F=5mm/s
        G91 # Relative move
        G1 Z2 # move up 2mm
        G90 # Absolute move
        MULTIPROBE2 PROBE_NAME=tool_setter Z=0 F=1 # Probe again to Z=0 at F=1mm/s

        QUERY_ENDSTOPS
        # It seems you cant query_endstops and immediately access the variables, so moving to the delayed gcode should solve the problem if we  query before the delayed code executes.
        UPDATE_DELAYED_GCODE ID=_MEASURE_TOOL_LENGTH_DELAYED DURATION=0.1 MACRO=_MEASURE_TOOL_LENGTH_DELAYED
    {% else %}
        RESPOND PREFIX='Error' MSG='Tool Setter X, Y coordinates not set in USER_VARIABLES'
    {% endif %}

[delayed_gcode _MEASURE_TOOL_LENGTH_DELAYED]
# It seems you cant query_endstops and immediately access the variables, so moving to the delayed gcode should solve the problem if we  query before the delayed code executes.
gcode:
    {% set current_z_offset = printer.gcode_move.homing_origin.z|float %}
    {% set max_z_with_offset = printer.configfile.config['stepper_z'].position_max|float - current_z_offset %}

    {% set tool_setter_triggered = printer.query_endstops.last_query['probe_tool_setter'] %}
    # RESPOND MSG='{pt}'

    {% if tool_setter_triggered == 1 %}
        # calcualte tool length, update varioabels
        {% set tool_setter_z_offset = printer['gcode_macro USER_VARIABLES'].tool_setter_z_offset|float %}
        {% set current_z_position = printer.toolhead.position.z|float %}

        {% set current_workspace_offset_z = printer.gcode_move.homing_origin.z %}
        {% set current_tool_length = printer['gcode_macro KCNC_VARIABLES'].current_tool_length|float %}

        {% set new_tool_length = current_z_position - tool_setter_z_offset %}

        {% if current_tool_length > 0 %}
            # calc the difference and stuff
            # old tool has been measured and stored as current_tool_length, so we assume the SET_GCODE_OFFSET values were set with relative to the old tool length.
            {% set tool_length_difference = new_tool_length - current_tool_length %}
            {% set new_workspace_offset_z = current_workspace_offset_z + tool_length_difference %}

            UPDATE_OFFSETS_XYZ Z={new_workspace_offset_z}
            SET_GCODE_VARIABLE MACRO=KCNC_VARIABLES VARIABLE=current_tool_length VALUE={new_tool_length}
            RESPOND PREFIX='info' MSG='New Tool length: {new_tool_length}, Tool length difference: {tool_length_difference}, New Workspace Z Offset: {new_workspace_offset_z}'

        {% else %} % # tool length was not set
            # the tool length is the tool position, minus the tool setter offset
            # {% set tool_length = current_z_position - tool_setter_z_offset %}
            SET_GCODE_VARIABLE MACRO=KCNC_VARIABLES VARIABLE=current_tool_length VALUE={new_tool_length}
            RESPOND PREFIX='info' MSG='Tool length calculated as {current_z_position} - {tool_setter_z_offset} = {new_tool_length}'
        {% endif %}
        G4 P1000
        G28 Z # Home Z to be safe
    {% else %}
        RESPOND PREFIX='Error' MSG='Error calculating tool length'
    {% endif %}

[gcode_macro FIND_HOLE_CENTER]
#INCOMPLETE
gcode:
    # Store initial position
    SAVE_GCODE_STATE NAME=find_hole_center

    {% set probeName = params.PROBENAME|default('multi_axis_probe')|string %}
    {% set probeDistance = params.PROBEDISTANCE|default(20)|float %}
    {% set feedrate = params.FEEDRATE|default(printer['gcode_macro PROBE_AXIS'].feedrate)|float %}

    {% set current_x_offset = printer.gcode_move.homing_origin.x|float %}
    {% set current_y_offset = printer.gcode_move.homing_origin.y|float %}
    {% set current_z_offset = printer.gcode_move.homing_origin.z|float %}

    ZERO_WORKSPACE_OFFSETS

    {% set current_x = printer.toolhead.position.x|float %}
    {% set current_y = printer.toolhead.position.y|float %}
    {% set current_z = printer.toolhead.position.z|float %}
    
    {% set holeCenterX = 0 %}
    {% set holeCenterY = 0 %}

    {% set holeLeftX = 0 %}
    {% set holeRightX = 0 %}
    {% set holeLeftY = 0 %}
    {% set holeRightY = 0 %}
 
    # Set offets to current position to make calculations simpler, should be restored by RESTORE_GCODE_STATE
    # SET_OFFSETS_FROM_TOOL

    # Probe to find the left edge of the hole, should be negative
    MULTIPROBE2 PROBE_NAME={probeName} X=-{probeDistance} F{feedrate}
    G4 200
    {% set holeLeftX = printer.toolhead.position.x|float %}

    # Probe to find the right edge of the hole, should be positive
    MULTIPROBE2 PROBE_NAME={probeName} X={probeDistance} F{feedrate}
    G4 200
    {% set holeRightX = printer.toolhead.position.x|float %}
    
    # Calculate X center
    {% set holeCenterX = (holeLeftX + holeRightX) / 2 %}

    # Probe to find the front edge of the hole
    MULTIPROBE2 PROBE_NAME={probeName} Y=-{probeDistance} F{feedrate}
    G4 200
    {% set holeLeftY = printer.toolhead.position.y|float %}

    # Probe to find the right edge of the hole, should be positive
    MULTIPROBE2 PROBE_NAME={probeName} Y={probeDistance} F{feedrate}
    G4 200
    {% set holeRightY = printer.toolhead.position.y|float %}
   
    # Calculate Y center
    {% set holeCenterY = (holeLeftY + holeRightY) / 2 %}

    RESPOND PREFIX='Info' MSG='Hole center at: {holeCenterX}, {holeCenterY}'

    # Restore initial state
    RESTORE_GCODE_STATE NAME=find_hole_center

# [gcode_macro FIND_WORKPIECE_CENTER]
#INCOMPLETE
# Define parameters for the probing distance with default values
# variable_probe_distance: 100  # Default distance from center to edge
# gcode:
#     {% set distance = params.DISTANCE|default(variable_probe_distance)|float %}
#     SAVE_GCODE_STATE NAME=find_center_state

#     # Move to the left edge
#     G91  # Relative positioning
#     G0 X-{distance} F600
#     G38.2 X-{distance} F300
#     {% set left_edge = printer.toolhead.position.x %}
#     G0 X{distance}  # Move back towards center

#     # Move to the right edge
#     G0 X{distance} F600
#     G38.2 X{distance} F300
#     {% set right_edge = printer.toolhead.position.x %}
#     G0 X-{distance}  # Move back towards center

#     # Move to the front edge
#     G0 Y-{distance} F600
#     G38.2 Y-{distance} F300
#     {% set front_edge = printer.toolhead.position.y %}
#     G0 Y{distance}  # Move back towards center

#     # Move to the back edge
#     G0 Y{distance} F600
#     G38.2 Y{distance} F300
#     {% set back_edge = printer.toolhead.position.y %}
#     G0 Y-{distance}  # Move back towards center

#     # Calculate center coordinates
#     {% set center_x = (left_edge + right_edge) / 2 %}
#     {% set center_y = (front_edge + back_edge) / 2 %}

#     # Move to the calculated center
#     G90  # Absolute positioning
#     G0 X{center_x} Y{center_y} F600  # Move to center of workpiece

#     RESTORE_GCODE_STATE NAME=find_center_state

[gcode_macro GOTO_WORKSPACE_X_Y]
gcode:
  {% set feed_rate = printer.configfile.config["printer"].max_velocity|default(100)|float * 60 %}
  g1 X0 Y0 F{feed_rate}
  
[gcode_macro FLATTEN_SLAB]
gcode:
    {% set max_x = printer.configfile.config["stepper_x"].position_max|float %}
    {% set max_y = printer.configfile.config["stepper_y"].position_max|float %}
    {% set cut_depth = params.CUT_DEPTH|default(-0.5)|float %}

    {% set feed_rate = (params.FEED_RATE|default(10)|float) * 60 %} # Convert mm/s to mm/min
    {% set step_over = params.STEP_OVER|default(15)|float %}
    {% set spindle_speed = params.SPINDLE_SPEED|default(10000)|float %}

    # Use the new  flatten_area macro

    FLATTEN_AREA START_X=0 START_Y=0 END_X={max_x} END_Y={max_y} CUT_DEPTH={cut_depth} FEED_RATE={feed_rate} STEP_OVER={step_over} SPINDLE_SPEED={spindle_speed}


[gcode_macro FLATTEN_AREA]
gcode:

    {% set start_x = params.START_X|default(0)|float %}
    {% set start_y = params.START_Y|default(0)|float %}

    {% set end_x = params.END_X|default(printer.configfile.config["stepper_x"].position_max|float)|float %}
    {% set end_y = params.END_Y|default(printer.configfile.config["stepper_y"].position_max|float)|float %}
    {% set cut_depth = params.CUT_DEPTH|default(-0.5)|float %}

    {% set feed_rate = (params.FEED_RATE|default(10)|float) * 60 %} # Convert mm/s to mm/min
    {% set step_over = params.STEP_OVER|default(15)|float %}
    {% set spindle_speed = params.SPINDLE_SPEED|default(10000)|float %}
    
    # Calculate the number of steps needed, ensuring it's an integer
    {% set num_steps = (((end_y - start_y - step_over) / step_over)|round(0, 'ceil'))|int %}

    RESPOND PREFIX="warning" MSG="Offsets are obeyed by this macro" 
    RESPOND PREFIX="info" MSG="Flattening Area: ({start_x}, {start_y}) to ({end_x}, {end_y}), cut depth: {cut_depth}" 
    
    M3 S{spindle_speed}
    G91 ; relative positioning to move up 5
    G0 Z5 F{feed_rate / 10} ; Move to safe height
    
    G90 ; Absolute positioning
    G21 ; Set units to millimeters
    

    # Perimeter cut
    G0 X{start_x} Y{start_y} F{feed_rate}
    G1 Z{cut_depth} F{feed_rate / 10}
    G1 X{end_x} F{feed_rate} ; Cut along the X axis
    G1 Y{end_y} F{feed_rate} ; Cut along the Y axis
    G1 X{start_x} F{feed_rate} ; Cut back along the X axis
    G1 Y{start_y} F{feed_rate} ; Cut back along the Y axis

    #End position X=0 Y=0
    G0 X{step_over} F{feed_rate} ; Move to start position at current row

    # Sequential pattern cut
    {% for i in range(num_steps) %}
        {% set ypos = i * step_over + step_over %}
        G0 Y{ypos} F{feed_rate} ; Move to next row

        {% if i % 2 == 1 %}
          # The code here will execute if 'i' is odd.
          G0 X{step_over} F{feed_rate} ; Move to the step_over (near x_min) to perform a cut on moves 1, 3, 5 etc
        {% else %}
          G0 X{end_x - step_over} F{feed_rate} ; Move to the x_max minus step_over to perform a cut on moves 0, 2, 4 etc
        {% endif %}

    {% endfor %}

    G0 Z5 ; Raise to safety height
    M5 ; stop spindle
    G28 ; Home machine

[gcode_macro PROBE_AXIS]
variable_axis: None
variable_total_steps: 0
variable_current_step: 0
variable_step: 0.05
variable_feedrate: 500
variable_distance: 10
variable_direction: 1
variable_probe_diameter: 4
gcode:
  # RESPOND PREFIX="info" MSG="Axis: {axis}, Total Steps: {total_steps}, Current Step: {current_step}, Step: {step}, Feedrate: {feedrate}, Distance: {distance}"

[gcode_macro START_PROBE_Z]
gcode:
    START_PROBE_AXIS AXIS=Z DIRECTION=-1

[gcode_macro START_PROBE_AXIS]
gcode:
    {% set axis = params.AXIS|lower %}
    {% if axis == 'z' %}
      {% set direction = params.DIRECTION|default(-1)|float %}
    {% else %}
      {% set direction = params.DIRECTION|default(1)|float %}
    {% endif %}
    {% set distance = params.DISTANCE|default(printer["gcode_macro PROBE_AXIS"].distance)|float %}
    {% set feedrate = params.FEEDRATE|default(printer["gcode_macro PROBE_AXIS"].feedrate)|float %}
    {% set step = printer["gcode_macro PROBE_AXIS"].step %}
    {% set probe_diameter = params.PROBE_DIAMETER|default(printer["gcode_macro PROBE_AXIS"].probe_diameter)|float %}

    {% set total_steps = (distance / step)|round(0, 'ceil')|int %}
    {% set current_step = 0 %}
    
    SET_GCODE_VARIABLE MACRO=PROBE_AXIS VARIABLE=axis VALUE="'{axis}'"
    SET_GCODE_VARIABLE MACRO=PROBE_AXIS VARIABLE=total_steps VALUE={total_steps}
    SET_GCODE_VARIABLE MACRO=PROBE_AXIS VARIABLE=current_step VALUE={current_step}
    SET_GCODE_VARIABLE MACRO=PROBE_AXIS VARIABLE=direction VALUE={direction}
    SET_GCODE_VARIABLE MACRO=PROBE_AXIS VARIABLE=probe_diameter VALUE={probe_diameter}
    
    G91  # Relative positioning
    G1.0 { axis|upper }{step * direction} F{ feedrate }
    G90  # Absolute positioning
    QUERY_PROBE
    UPDATE_DELAYED_GCODE ID=CONTINUE_PROBE DURATION=0.05 MACRO=CONTINUE_PROBE


[delayed_gcode CONTINUE_PROBE]
gcode:
    {% set axis = printer["gcode_macro PROBE_AXIS"].axis|upper %}
    {% set step = printer["gcode_macro PROBE_AXIS"].step|float %}
    {% set direction = printer["gcode_macro PROBE_AXIS"].direction|float %}
    {% set feedrate = printer["gcode_macro PROBE_AXIS"].feedrate|float %}
   
    {% set probe_diameter = printer["gcode_macro PROBE_AXIS"].probe_diameter|default(0)|float %}
    {% if axis == 'Z' %}
      {% set probe_offset = 0 %}
    {% else %}
      {% set probe_offset = probe_diameter / 2 * direction|float %}
    {% endif %}

    {% if printer.probe.last_query %}
        {% set position = (printer.toolhead.position[{'x': 0, 'y': 1, 'z': 2}[axis|lower]] + probe_offset)|float %}
        RESPOND PREFIX="info" MSG="Probing Successful, Updating Offset, {axis|upper}:{position}"    
        UPDATE_OFFSETS_XYZ {axis|upper}={position}
    {% else %}
        {% set current_step = printer["gcode_macro PROBE_AXIS"].current_step + 1 %}
        {% if current_step < printer["gcode_macro PROBE_AXIS"].total_steps %}
            SET_GCODE_VARIABLE MACRO=PROBE_AXIS VARIABLE=current_step VALUE={current_step}
            G91  # Relative positioning
            G1.0 { axis|upper }{ step * direction } F{ feedrate }
            G90  # Absolute positioning
            QUERY_PROBE
            UPDATE_DELAYED_GCODE ID=CONTINUE_PROBE DURATION=0.05 MACRO=CONTINUE_PROBE
        {% else %}
            RESPOND PREFIX="error" MSG="Probing Completed: Probe Not Triggered"
        {% endif %}
    {% endif %}
